package com.github.fwi.yapool.examples;

import java.util.Collection;
import java.util.concurrent.atomic.AtomicLong;

import com.github.fwi.yapool.IPoolFactory;
import com.github.fwi.yapool.IPoolListener;
import com.github.fwi.yapool.PoolEvent;
import com.github.fwi.yapool.PoolPruner;
import com.github.fwi.yapool.PrunedPool;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Demonstrates events generated by a pool.
 * The comments in the source code below explains the log-statements generated by the main-method: <pre>{@literal
44:02:261 [main] INFO yapool.example.events - Starting ExampleEvents
44:02:271 [main] INFO yapool.example.events - PoolEvent:CREATED:1
44:02:271 [main] INFO yapool.example.events - PoolEvent:CREATED:2
44:02:271 [main] INFO yapool.example.events - PoolEvent:OPENED:none

44:02:272 [main] INFO yapool.example.events - PoolEvent:ACQUIRING:none
44:02:272 [main] INFO yapool.example.events - PoolEvent:ACQUIRED:2
44:02:273 [main] INFO yapool.example.events - PoolEvent:RELEASING:2

44:02:278 [pool-1-thread-1] INFO yapool.example.events - PoolEvent:IDLE_EXPIRED:1
44:02:278 [pool-1-thread-1] INFO yapool.example.events - PoolEvent:DESTROYING:1

44:02:282 [main] INFO yapool.example.events - PoolEvent:ACQUIRING:none
44:02:282 [main] INFO yapool.example.events - PoolEvent:ACQUIRED:2
44:02:284 [pool-1-thread-1] INFO yapool.example.events - PoolEvent:LEASE_EXPIRED:2
44:02:284 [pool-1-thread-1] INFO yapool.example.events - PoolEvent:CREATED:3

44:02:287 [main] INFO yapool.example.events - PoolEvent:DESTROYING:2

44:02:287 [main] INFO yapool.example.events - PoolEvent:CLOSED:none
44:02:287 [main] INFO yapool.example.events - PoolEvent:DESTROYING:3
44:02:288 [main] INFO yapool.example.events - Pool pruner running: false
44:02:288 [main] INFO yapool.example.events - Finished ExampleEvents
}</pre>
 * @author Fred
 *
 */
public class ExampleEvents {

	public static final String LOG_CATEGORY = "yapool.example.events";
	
	private static final Logger log = LoggerFactory.getLogger(LOG_CATEGORY);
	
	public static void main(String[] args) {

		log.info("Starting " + ExampleEvents.class.getSimpleName());
		ExampleEvents ev = new ExampleEvents();
		try {
			ev.demonstrate();
		} catch (Exception e) {
			log.error("Events example failed to run.", e);
		} finally {
			// Make sure the scheduled executor service used by PoolPruner is stopped.
			PoolPruner.getInstance().stop();
		}
		log.info("Finished " + ExampleEvents.class.getSimpleName());
	}
	
	public void demonstrate() throws Exception {
		
		PrunedPool<Long> pool = new PrunedPool<Long>();
		pool.setFactory(new LongFactory());
		pool.setMinSize(1);

		// Event listeners can also be added while the pool is open.
		pool.getEvents().addPoolListener(new EventLogger());
		
		// Fires two CREATED events and one OPENED event
		pool.open(2);
		
		// Fires events ACQUIRING, ACQUIRED and RELEASING
		pool.release(pool.acquire());

		// Force other prune events, set some very low time-out values 
		pool.setMaxIdleTimeMs(1L);
		pool.setMaxLeaseTimeMs(1L);
		pool.setPruneIntervalMs(1L);
		
		// Prune the pool every 1 ms. (pruneInterval).
		PoolPruner.getInstance().add(pool);
		
		Thread.sleep(5L);
		// Pool pruner goes to work: fires IDLE_EXPIRED and DESTROYING event.
		
		Long l = pool.acquire();
		Thread.sleep(5L);
		// Pool pruner goes to work: generates LEASE_EXPIRED event.
		// Since pool-size drops below pool minimum size, a new resource is created,
		// which fires a CREATED event.
		
		// An evicted (expired) resource is not put back in the pool, it is destroyed.
		// Fires DESTROYING event.
		pool.release(l);
		
		// Fires CLOSED event and DESTROYING event for the one resource still in the pool.
		pool.close();
		
		// Pool pruner stops when last pool being pruned is closed.
		log.info("Pool pruner running: " + PoolPruner.getInstance().isRunning());
	}

	
	class LongFactory implements IPoolFactory<Long> {

		private AtomicLong l = new AtomicLong();
		
		@Override
		public Long create() {
			return l.incrementAndGet();
		}

		@Override
		public boolean isValid(Long resource) {
			return true;
		}

		@Override
		public void destroy(Long resource) {}
		
	}
	
	class EventLogger implements IPoolListener {

		private final Logger log = LoggerFactory.getLogger(LOG_CATEGORY);
		
		@Override
		public boolean wantAllEventActions() {
			return true;
		}

		@Override
		public Collection<String> getWantEventActions() {
			return null;
		}

		@Override
		public boolean wantsEventAction(String poolEventAction) {
			return true;
		}

		@Override
		public void onPoolEvent(PoolEvent poolEvent) {
			log.info(poolEvent.toString());
		}
		
	}
	
}
